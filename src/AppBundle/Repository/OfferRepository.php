<?php

namespace AppBundle\Repository;
use Doctrine\ORM\Query\Expr\Join;

/**
 * OfferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfferRepository extends \Doctrine\ORM\EntityRepository
{
    public function findUsableOffersByCustomer($type, $card, $count)
    {
        return $this->createQueryBuilder('o')
            ->leftJoin('o.cardsOffers', "co", Join::WITH, "co.card = :card")
            ->where('o.offerType = :type')
            ->andWhere('o.count <= :count')
            ->andWhere('o.isActive = true')
            ->setParameters(
                array(
                    "card" => $card,
                    "type" => $type,
                    "count" => $count
                )
            )
            ->getQuery()
            ->getResult();
    }

    public function findLockedOffersForCustomer($card)
    {
        return $this->createQueryBuilder('o')
            ->leftJoin('o.cardsOffers', "co", Join::WITH, "co.card = :card")
            ->where("o.isActive = true")
            ->andWhere('o.offerType != :temp')
            ->andWhere('co.card IS NULL')
            ->setParameters(
                array(
                    "card" => $card,
                    "temp" => 'temp'
                )
            )
            ->getQuery()
            ->getResult();

    }

    public function findUnusedCurrentTempOffers($card)
    {
        return $this->createQueryBuilder('o')
            ->leftJoin('o.cardsOffers', 'co', Join::WITH, "co.card = :card")
            ->where('co.card IS NULL')
            ->andWhere('o.offerType = :temp')
            ->andWhere('o.startDate <= :today')
            ->andWhere('o.endDate >= :today')
            ->andWhere('o.isActive = true')
            ->setParameters(
                array(
                    "temp" => "temp",
                    'today' => new \DateTime('now'),
                    "card" => $card
                )
            )
            ->getQuery()
            ->getResult();
    }

    public function getAllOffersQuery()
    {
        return $this->createQueryBuilder('o')
            ->orderBy('o.code', "ASC")
            ->getQuery();
    }
}
